{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Container,Typography,Box,Grid,Card,CardMedia,CardContent,Divider}from'@mui/material';import{useNavigate}from'react-router-dom';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SearchResults=_ref=>{let{query}=_ref;const[movies,setMovies]=useState([]);const[tvShows,setTvShows]=useState([]);const[loading,setLoading]=useState(true);const navigate=useNavigate();useEffect(()=>{const fetchResults=async()=>{if(!query){setLoading(false);return;}setLoading(true);try{// Recherche de films\nconst moviesResponse=await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=fr-FR&query=${query}&page=1`);// Recherche de séries\nconst tvResponse=await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=fr-FR&query=${query}&page=1`);setMovies(moviesResponse.data.results);setTvShows(tvResponse.data.results);setLoading(false);}catch(error){console.error('Error fetching search results:',error);setLoading(false);}};fetchResults();},[query]);const handleCardClick=(id,isMovie)=>{if(isMovie){navigate(`/movie/${id}`);}else{navigate(`/tv/${id}`);}};const renderMediaCards=(mediaList,isMovie)=>{return/*#__PURE__*/_jsx(Grid,{container:true,spacing:2,children:mediaList.map(media=>/*#__PURE__*/_jsx(Grid,{item:true,xs:12,sm:6,md:3,children:/*#__PURE__*/_jsxs(Card,{sx:{height:'100%',display:'flex',flexDirection:'column',transition:'transform 0.3s, box-shadow 0.3s','&:hover':{transform:'scale(1.05)',boxShadow:'0 10px 20px rgba(0,0,0,0.2)',cursor:'pointer'}},onClick:()=>handleCardClick(media.id,isMovie),children:[/*#__PURE__*/_jsx(CardMedia,{component:\"img\",height:\"260\",sx:{objectFit:'cover'},image:media.poster_path?`https://image.tmdb.org/t/p/w500${media.poster_path}`:'https://via.placeholder.com/500x750?text=No+Image',alt:isMovie?media.title:media.name}),/*#__PURE__*/_jsxs(CardContent,{sx:{flexGrow:1},children:[/*#__PURE__*/_jsx(Typography,{gutterBottom:true,variant:\"h6\",component:\"div\",noWrap:true,children:isMovie?media.title:media.name}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:isMovie&&media.release_date?new Date(media.release_date).getFullYear():media.first_air_date&&new Date(media.first_air_date).getFullYear()})]})]})},media.id))});};if(loading){return/*#__PURE__*/_jsx(Box,{sx:{display:'flex',justifyContent:'center',p:5},children:\"Recherche en cours...\"});}if(!query){return/*#__PURE__*/_jsx(Container,{maxWidth:\"lg\",sx:{py:5},children:/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Veuillez saisir un terme de recherche\"})});}return/*#__PURE__*/_jsxs(Container,{maxWidth:\"lg\",sx:{py:5},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h4\",gutterBottom:true,children:[\"R\\xE9sultats pour \\\"\",query,\"\\\"\"]}),/*#__PURE__*/_jsx(Divider,{sx:{mb:3}}),movies.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h5\",sx:{mb:2},children:[\"Films trouv\\xE9s (\",movies.length,\")\"]}),renderMediaCards(movies,true)]}):/*#__PURE__*/_jsx(Typography,{variant:\"body1\",sx:{mt:2},children:\"Aucun film trouv\\xE9\"}),/*#__PURE__*/_jsx(Divider,{sx:{my:4}}),tvShows.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h5\",sx:{mb:2},children:[\"S\\xE9ries trouv\\xE9es (\",tvShows.length,\")\"]}),renderMediaCards(tvShows,false)]}):/*#__PURE__*/_jsx(Typography,{variant:\"body1\",sx:{mt:2},children:\"Aucune s\\xE9rie trouv\\xE9e\"})]});};export default SearchResults;","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Box","Grid","Card","CardMedia","CardContent","Divider","useNavigate","axios","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SearchResults","_ref","query","movies","setMovies","tvShows","setTvShows","loading","setLoading","navigate","fetchResults","moviesResponse","get","process","env","REACT_APP_TMDB_API_KEY","tvResponse","data","results","error","console","handleCardClick","id","isMovie","renderMediaCards","mediaList","container","spacing","children","map","media","item","xs","sm","md","sx","height","display","flexDirection","transition","transform","boxShadow","cursor","onClick","component","objectFit","image","poster_path","alt","title","name","flexGrow","gutterBottom","variant","noWrap","color","release_date","Date","getFullYear","first_air_date","justifyContent","p","maxWidth","py","mb","length","mt","my"],"sources":["C:/Users/franc/Html_App/movie-flex-v1/src/pages/SearchResults.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Typography, Box, Grid, Card, CardMedia, CardContent, Divider } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\ninterface SearchResultsProps {\r\n  query: string;\r\n}\r\n\r\nconst SearchResults: React.FC<SearchResultsProps> = ({ query }) => {\r\n  const [movies, setMovies] = useState<any[]>([]);\r\n  const [tvShows, setTvShows] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchResults = async () => {\r\n      if (!query) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      try {\r\n        // Recherche de films\r\n        const moviesResponse = await axios.get(\r\n          `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=fr-FR&query=${query}&page=1`\r\n        );\r\n        \r\n        // Recherche de séries\r\n        const tvResponse = await axios.get(\r\n          `https://api.themoviedb.org/3/search/tv?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=fr-FR&query=${query}&page=1`\r\n        );\r\n        \r\n        setMovies(moviesResponse.data.results);\r\n        setTvShows(tvResponse.data.results);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching search results:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchResults();\r\n  }, [query]);\r\n\r\n  const handleCardClick = (id: number, isMovie: boolean) => {\r\n    if (isMovie) {\r\n      navigate(`/movie/${id}`);\r\n    } else {\r\n      navigate(`/tv/${id}`);\r\n    }\r\n  };\r\n\r\n  const renderMediaCards = (mediaList: any[], isMovie: boolean) => {\r\n    return (\r\n      <Grid container spacing={2}>\r\n        {mediaList.map((media) => (\r\n          <Grid item key={media.id} xs={12} sm={6} md={3}>\r\n            <Card \r\n              sx={{ \r\n                height: '100%', \r\n                display: 'flex', \r\n                flexDirection: 'column',\r\n                transition: 'transform 0.3s, box-shadow 0.3s',\r\n                '&:hover': {\r\n                  transform: 'scale(1.05)',\r\n                  boxShadow: '0 10px 20px rgba(0,0,0,0.2)',\r\n                  cursor: 'pointer'\r\n                }\r\n              }}\r\n              onClick={() => handleCardClick(media.id, isMovie)}\r\n            >\r\n              <CardMedia\r\n                component=\"img\"\r\n                height=\"260\"\r\n                sx={{ objectFit: 'cover' }}\r\n                image={\r\n                  media.poster_path\r\n                    ? `https://image.tmdb.org/t/p/w500${media.poster_path}`\r\n                    : 'https://via.placeholder.com/500x750?text=No+Image'\r\n                }\r\n                alt={isMovie ? media.title : media.name}\r\n              />\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography gutterBottom variant=\"h6\" component=\"div\" noWrap>\r\n                  {isMovie ? media.title : media.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {isMovie && media.release_date \r\n                    ? new Date(media.release_date).getFullYear() \r\n                    : media.first_air_date && new Date(media.first_air_date).getFullYear()}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return <Box sx={{ display: 'flex', justifyContent: 'center', p: 5 }}>Recherche en cours...</Box>;\r\n  }\r\n\r\n  if (!query) {\r\n    return (\r\n      <Container maxWidth=\"lg\" sx={{ py: 5 }}>\r\n        <Typography variant=\"h4\" gutterBottom>Veuillez saisir un terme de recherche</Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ py: 5 }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Résultats pour \"{query}\"\r\n      </Typography>\r\n      \r\n      <Divider sx={{ mb: 3 }} />\r\n      \r\n      {movies.length > 0 ? (\r\n        <>\r\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>Films trouvés ({movies.length})</Typography>\r\n          {renderMediaCards(movies, true)}\r\n        </>\r\n      ) : (\r\n        <Typography variant=\"body1\" sx={{ mt: 2 }}>Aucun film trouvé</Typography>\r\n      )}\r\n      \r\n      <Divider sx={{ my: 4 }} />\r\n      \r\n      {tvShows.length > 0 ? (\r\n        <>\r\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>Séries trouvées ({tvShows.length})</Typography>\r\n          {renderMediaCards(tvShows, false)}\r\n        </>\r\n      ) : (\r\n        <Typography variant=\"body1\" sx={{ mt: 2 }}>Aucune série trouvée</Typography>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchResults;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}